// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: sma.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageManagementAgentClient is the client API for StorageManagementAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageManagementAgentClient interface {
	// Creates a new device.  A device is an entity that can be used to expose
	// volumes (e.g. an NVMeoF subsystem).
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	// Deletes a device.  It is only allowed to delete a device with volumes still
	// attached if that device doesn't support attaching volumes through
	// AttachVolume (e.g. virtio-blk).   In other cases, it is forbidden and
	// FAILED_PRECONDITION status will be returned.
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	// Attaches a volume to a specified device making it available through that
	// device (e.g. for NVMeoF this results in adding a namespace to an NVMeoF
	// subsystem).  The type of volume doesn't need to match the type of device
	// (e.g. it's perfectly fine to attach an NVMe/TCP volume to a virtio-blk
	// device).
	AttachVolume(ctx context.Context, in *AttachVolumeRequest, opts ...grpc.CallOption) (*AttachVolumeResponse, error)
	// Detaches a volume from a device
	DetachVolume(ctx context.Context, in *DetachVolumeRequest, opts ...grpc.CallOption) (*DetachVolumeResponse, error)
	// Configures QoS on a device/volume
	SetQos(ctx context.Context, in *SetQosRequest, opts ...grpc.CallOption) (*SetQosResponse, error)
	// Returns QoS capabilities of a given device type
	GetQosCapabilities(ctx context.Context, in *GetQosCapabilitiesRequest, opts ...grpc.CallOption) (*GetQosCapabilitiesResponse, error)
}

type storageManagementAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageManagementAgentClient(cc grpc.ClientConnInterface) StorageManagementAgentClient {
	return &storageManagementAgentClient{cc}
}

func (c *storageManagementAgentClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/sma.StorageManagementAgent/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementAgentClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, "/sma.StorageManagementAgent/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementAgentClient) AttachVolume(ctx context.Context, in *AttachVolumeRequest, opts ...grpc.CallOption) (*AttachVolumeResponse, error) {
	out := new(AttachVolumeResponse)
	err := c.cc.Invoke(ctx, "/sma.StorageManagementAgent/AttachVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementAgentClient) DetachVolume(ctx context.Context, in *DetachVolumeRequest, opts ...grpc.CallOption) (*DetachVolumeResponse, error) {
	out := new(DetachVolumeResponse)
	err := c.cc.Invoke(ctx, "/sma.StorageManagementAgent/DetachVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementAgentClient) SetQos(ctx context.Context, in *SetQosRequest, opts ...grpc.CallOption) (*SetQosResponse, error) {
	out := new(SetQosResponse)
	err := c.cc.Invoke(ctx, "/sma.StorageManagementAgent/SetQos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementAgentClient) GetQosCapabilities(ctx context.Context, in *GetQosCapabilitiesRequest, opts ...grpc.CallOption) (*GetQosCapabilitiesResponse, error) {
	out := new(GetQosCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/sma.StorageManagementAgent/GetQosCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageManagementAgentServer is the server API for StorageManagementAgent service.
// All implementations must embed UnimplementedStorageManagementAgentServer
// for forward compatibility
type StorageManagementAgentServer interface {
	// Creates a new device.  A device is an entity that can be used to expose
	// volumes (e.g. an NVMeoF subsystem).
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	// Deletes a device.  It is only allowed to delete a device with volumes still
	// attached if that device doesn't support attaching volumes through
	// AttachVolume (e.g. virtio-blk).   In other cases, it is forbidden and
	// FAILED_PRECONDITION status will be returned.
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	// Attaches a volume to a specified device making it available through that
	// device (e.g. for NVMeoF this results in adding a namespace to an NVMeoF
	// subsystem).  The type of volume doesn't need to match the type of device
	// (e.g. it's perfectly fine to attach an NVMe/TCP volume to a virtio-blk
	// device).
	AttachVolume(context.Context, *AttachVolumeRequest) (*AttachVolumeResponse, error)
	// Detaches a volume from a device
	DetachVolume(context.Context, *DetachVolumeRequest) (*DetachVolumeResponse, error)
	// Configures QoS on a device/volume
	SetQos(context.Context, *SetQosRequest) (*SetQosResponse, error)
	// Returns QoS capabilities of a given device type
	GetQosCapabilities(context.Context, *GetQosCapabilitiesRequest) (*GetQosCapabilitiesResponse, error)
	mustEmbedUnimplementedStorageManagementAgentServer()
}

// UnimplementedStorageManagementAgentServer must be embedded to have forward compatible implementations.
type UnimplementedStorageManagementAgentServer struct {
}

func (UnimplementedStorageManagementAgentServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedStorageManagementAgentServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedStorageManagementAgentServer) AttachVolume(context.Context, *AttachVolumeRequest) (*AttachVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachVolume not implemented")
}
func (UnimplementedStorageManagementAgentServer) DetachVolume(context.Context, *DetachVolumeRequest) (*DetachVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachVolume not implemented")
}
func (UnimplementedStorageManagementAgentServer) SetQos(context.Context, *SetQosRequest) (*SetQosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQos not implemented")
}
func (UnimplementedStorageManagementAgentServer) GetQosCapabilities(context.Context, *GetQosCapabilitiesRequest) (*GetQosCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQosCapabilities not implemented")
}
func (UnimplementedStorageManagementAgentServer) mustEmbedUnimplementedStorageManagementAgentServer() {
}

// UnsafeStorageManagementAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageManagementAgentServer will
// result in compilation errors.
type UnsafeStorageManagementAgentServer interface {
	mustEmbedUnimplementedStorageManagementAgentServer()
}

func RegisterStorageManagementAgentServer(s grpc.ServiceRegistrar, srv StorageManagementAgentServer) {
	s.RegisterService(&StorageManagementAgent_ServiceDesc, srv)
}

func _StorageManagementAgent_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementAgentServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sma.StorageManagementAgent/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementAgentServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementAgent_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementAgentServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sma.StorageManagementAgent/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementAgentServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementAgent_AttachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementAgentServer).AttachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sma.StorageManagementAgent/AttachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementAgentServer).AttachVolume(ctx, req.(*AttachVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementAgent_DetachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementAgentServer).DetachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sma.StorageManagementAgent/DetachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementAgentServer).DetachVolume(ctx, req.(*DetachVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementAgent_SetQos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementAgentServer).SetQos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sma.StorageManagementAgent/SetQos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementAgentServer).SetQos(ctx, req.(*SetQosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementAgent_GetQosCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQosCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementAgentServer).GetQosCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sma.StorageManagementAgent/GetQosCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementAgentServer).GetQosCapabilities(ctx, req.(*GetQosCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageManagementAgent_ServiceDesc is the grpc.ServiceDesc for StorageManagementAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageManagementAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sma.StorageManagementAgent",
	HandlerType: (*StorageManagementAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _StorageManagementAgent_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _StorageManagementAgent_DeleteDevice_Handler,
		},
		{
			MethodName: "AttachVolume",
			Handler:    _StorageManagementAgent_AttachVolume_Handler,
		},
		{
			MethodName: "DetachVolume",
			Handler:    _StorageManagementAgent_DetachVolume_Handler,
		},
		{
			MethodName: "SetQos",
			Handler:    _StorageManagementAgent_SetQos_Handler,
		},
		{
			MethodName: "GetQosCapabilities",
			Handler:    _StorageManagementAgent_GetQosCapabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sma.proto",
}
