// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: sma.proto

// This file provides the generic definitions for the Storage Management Agent
// gRPC calls.  All of the methods are supposed to be idempotent.  Errors are
// reported as standard gRPC status codes.

package v1alpha1

import (
	nvme "github.com/spdk/sma-goapi/v1alpha1/nvme"
	nvmf "github.com/spdk/sma-goapi/v1alpha1/nvmf"
	nvmf_tcp "github.com/spdk/sma-goapi/v1alpha1/nvmf_tcp"
	virtio_blk "github.com/spdk/sma-goapi/v1alpha1/virtio_blk"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration defining types of devices
type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_INVALID    DeviceType = 0
	DeviceType_DEVICE_TYPE_NVME       DeviceType = 1
	DeviceType_DEVICE_TYPE_VIRTIO_BLK DeviceType = 2
	DeviceType_DEVICE_TYPE_NVMF_TCP   DeviceType = 3
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_INVALID",
		1: "DEVICE_TYPE_NVME",
		2: "DEVICE_TYPE_VIRTIO_BLK",
		3: "DEVICE_TYPE_NVMF_TCP",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_INVALID":    0,
		"DEVICE_TYPE_NVME":       1,
		"DEVICE_TYPE_VIRTIO_BLK": 2,
		"DEVICE_TYPE_NVMF_TCP":   3,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_sma_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_sma_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{0}
}

type VolumeCryptoParameters_Cipher int32

const (
	VolumeCryptoParameters_AES_CBC VolumeCryptoParameters_Cipher = 0
	VolumeCryptoParameters_AES_XTS VolumeCryptoParameters_Cipher = 1
)

// Enum value maps for VolumeCryptoParameters_Cipher.
var (
	VolumeCryptoParameters_Cipher_name = map[int32]string{
		0: "AES_CBC",
		1: "AES_XTS",
	}
	VolumeCryptoParameters_Cipher_value = map[string]int32{
		"AES_CBC": 0,
		"AES_XTS": 1,
	}
)

func (x VolumeCryptoParameters_Cipher) Enum() *VolumeCryptoParameters_Cipher {
	p := new(VolumeCryptoParameters_Cipher)
	*p = x
	return p
}

func (x VolumeCryptoParameters_Cipher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeCryptoParameters_Cipher) Descriptor() protoreflect.EnumDescriptor {
	return file_sma_proto_enumTypes[1].Descriptor()
}

func (VolumeCryptoParameters_Cipher) Type() protoreflect.EnumType {
	return &file_sma_proto_enumTypes[1]
}

func (x VolumeCryptoParameters_Cipher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeCryptoParameters_Cipher.Descriptor instead.
func (VolumeCryptoParameters_Cipher) EnumDescriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{0, 0}
}

// Tweak mode - determine how nvme LBA is converted into tweak
type VolumeCryptoParameters_TweakMode int32

const (
	// default for SPDK bdev_crypto
	// Tweak[127:0] = {64'b0, LBA[63:0]}
	VolumeCryptoParameters_TWEAK_MODE_SIMPLE_LBA VolumeCryptoParameters_TweakMode = 0
	// Tweak[127:0] = {1â€™b0, ~LBA[62:0], LBA[63:0]}
	VolumeCryptoParameters_TWEAK_MODE_JOIN_NEG_LBA_WITH_LBA VolumeCryptoParameters_TweakMode = 1
	// tweak is derived from nvme LBA that is internally incremented by 1 for every 512 bytes processed
	// so initial lba = (BLOCK_SIZE_IN_BYTES / 512) * LBA
	// Tweak[127:0] = {lba[127:0]}
	VolumeCryptoParameters_TWEAK_MODE_INCR_512_FULL_LBA VolumeCryptoParameters_TweakMode = 2
	// tweak is derived from nvme LBA that is internally incremented by 1 for every 512 bytes processed
	// so initial lba = (BLOCK_SIZE_IN_BYTES / 512) * LBA
	// Tweak[127:0] = {lba[63:0], 64'b0}
	VolumeCryptoParameters_TWEAK_MODE_INCR_512_UPPER_LBA VolumeCryptoParameters_TweakMode = 3
)

// Enum value maps for VolumeCryptoParameters_TweakMode.
var (
	VolumeCryptoParameters_TweakMode_name = map[int32]string{
		0: "TWEAK_MODE_SIMPLE_LBA",
		1: "TWEAK_MODE_JOIN_NEG_LBA_WITH_LBA",
		2: "TWEAK_MODE_INCR_512_FULL_LBA",
		3: "TWEAK_MODE_INCR_512_UPPER_LBA",
	}
	VolumeCryptoParameters_TweakMode_value = map[string]int32{
		"TWEAK_MODE_SIMPLE_LBA":            0,
		"TWEAK_MODE_JOIN_NEG_LBA_WITH_LBA": 1,
		"TWEAK_MODE_INCR_512_FULL_LBA":     2,
		"TWEAK_MODE_INCR_512_UPPER_LBA":    3,
	}
)

func (x VolumeCryptoParameters_TweakMode) Enum() *VolumeCryptoParameters_TweakMode {
	p := new(VolumeCryptoParameters_TweakMode)
	*p = x
	return p
}

func (x VolumeCryptoParameters_TweakMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeCryptoParameters_TweakMode) Descriptor() protoreflect.EnumDescriptor {
	return file_sma_proto_enumTypes[2].Descriptor()
}

func (VolumeCryptoParameters_TweakMode) Type() protoreflect.EnumType {
	return &file_sma_proto_enumTypes[2]
}

func (x VolumeCryptoParameters_TweakMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeCryptoParameters_TweakMode.Descriptor instead.
func (VolumeCryptoParameters_TweakMode) EnumDescriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{0, 1}
}

// Volume's crypto parameters
type VolumeCryptoParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key to be used for encryption
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Second key (only required by some ciphers)
	Key2 []byte `protobuf:"bytes,2,opt,name=key2,proto3" json:"key2,omitempty"`
	// Cipher to use
	Cipher    VolumeCryptoParameters_Cipher    `protobuf:"varint,3,opt,name=cipher,proto3,enum=sma.VolumeCryptoParameters_Cipher" json:"cipher,omitempty"`
	TweakMode VolumeCryptoParameters_TweakMode `protobuf:"varint,4,opt,name=tweak_mode,json=tweakMode,proto3,enum=sma.VolumeCryptoParameters_TweakMode" json:"tweak_mode,omitempty"`
}

func (x *VolumeCryptoParameters) Reset() {
	*x = VolumeCryptoParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeCryptoParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCryptoParameters) ProtoMessage() {}

func (x *VolumeCryptoParameters) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCryptoParameters.ProtoReflect.Descriptor instead.
func (*VolumeCryptoParameters) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{0}
}

func (x *VolumeCryptoParameters) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VolumeCryptoParameters) GetKey2() []byte {
	if x != nil {
		return x.Key2
	}
	return nil
}

func (x *VolumeCryptoParameters) GetCipher() VolumeCryptoParameters_Cipher {
	if x != nil {
		return x.Cipher
	}
	return VolumeCryptoParameters_AES_CBC
}

func (x *VolumeCryptoParameters) GetTweakMode() VolumeCryptoParameters_TweakMode {
	if x != nil {
		return x.TweakMode
	}
	return VolumeCryptoParameters_TWEAK_MODE_SIMPLE_LBA
}

// Parameters describing a volume
type VolumeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume GUID/UUID
	VolumeId []byte `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Types that are assignable to ConnectionParams:
	//
	//	*VolumeParameters_Nvmf
	ConnectionParams isVolumeParameters_ConnectionParams `protobuf_oneof:"connection_params"`
	// Crypto parameters (optional)
	Crypto *VolumeCryptoParameters `protobuf:"bytes,3,opt,name=crypto,proto3" json:"crypto,omitempty"`
}

func (x *VolumeParameters) Reset() {
	*x = VolumeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeParameters) ProtoMessage() {}

func (x *VolumeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeParameters.ProtoReflect.Descriptor instead.
func (*VolumeParameters) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{1}
}

func (x *VolumeParameters) GetVolumeId() []byte {
	if x != nil {
		return x.VolumeId
	}
	return nil
}

func (m *VolumeParameters) GetConnectionParams() isVolumeParameters_ConnectionParams {
	if m != nil {
		return m.ConnectionParams
	}
	return nil
}

func (x *VolumeParameters) GetNvmf() *nvmf.VolumeConnectionParameters {
	if x, ok := x.GetConnectionParams().(*VolumeParameters_Nvmf); ok {
		return x.Nvmf
	}
	return nil
}

func (x *VolumeParameters) GetCrypto() *VolumeCryptoParameters {
	if x != nil {
		return x.Crypto
	}
	return nil
}

type isVolumeParameters_ConnectionParams interface {
	isVolumeParameters_ConnectionParams()
}

type VolumeParameters_Nvmf struct {
	// NVMeoF volume
	Nvmf *nvmf.VolumeConnectionParameters `protobuf:"bytes,2,opt,name=nvmf,proto3,oneof"`
}

func (*VolumeParameters_Nvmf) isVolumeParameters_ConnectionParams() {}

// Create device request
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume to immediately attach to the created device.  This field may be
	// optional for some device types (e.g. NVMe), while it may be required for
	// others (e.g. virtio-blk).
	Volume *VolumeParameters `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// Device-specific parameters
	//
	// Types that are assignable to Params:
	//
	//	*CreateDeviceRequest_Nvme
	//	*CreateDeviceRequest_VirtioBlk
	//	*CreateDeviceRequest_NvmfTcp
	Params isCreateDeviceRequest_Params `protobuf_oneof:"params"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDeviceRequest) GetVolume() *VolumeParameters {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (m *CreateDeviceRequest) GetParams() isCreateDeviceRequest_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *CreateDeviceRequest) GetNvme() *nvme.DeviceParameters {
	if x, ok := x.GetParams().(*CreateDeviceRequest_Nvme); ok {
		return x.Nvme
	}
	return nil
}

func (x *CreateDeviceRequest) GetVirtioBlk() *virtio_blk.DeviceParameters {
	if x, ok := x.GetParams().(*CreateDeviceRequest_VirtioBlk); ok {
		return x.VirtioBlk
	}
	return nil
}

func (x *CreateDeviceRequest) GetNvmfTcp() *nvmf_tcp.DeviceParameters {
	if x, ok := x.GetParams().(*CreateDeviceRequest_NvmfTcp); ok {
		return x.NvmfTcp
	}
	return nil
}

type isCreateDeviceRequest_Params interface {
	isCreateDeviceRequest_Params()
}

type CreateDeviceRequest_Nvme struct {
	// NVMe parameters
	Nvme *nvme.DeviceParameters `protobuf:"bytes,2,opt,name=nvme,proto3,oneof"`
}

type CreateDeviceRequest_VirtioBlk struct {
	// Virtio-blk parameters
	VirtioBlk *virtio_blk.DeviceParameters `protobuf:"bytes,3,opt,name=virtio_blk,json=virtioBlk,proto3,oneof"`
}

type CreateDeviceRequest_NvmfTcp struct {
	// NVMe/TCP parameters
	NvmfTcp *nvmf_tcp.DeviceParameters `protobuf:"bytes,4,opt,name=nvmf_tcp,json=nvmfTcp,proto3,oneof"`
}

func (*CreateDeviceRequest_Nvme) isCreateDeviceRequest_Params() {}

func (*CreateDeviceRequest_VirtioBlk) isCreateDeviceRequest_Params() {}

func (*CreateDeviceRequest_NvmfTcp) isCreateDeviceRequest_Params() {}

// Create device response
type CreateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device handle that can uniquely identify a device within an instance of
	// Storage Management Agent
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *CreateDeviceResponse) Reset() {
	*x = CreateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceResponse) ProtoMessage() {}

func (x *CreateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDeviceResponse) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

// Delete device request
type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device handle
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteDeviceRequest) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

// Delete device response
type DeleteDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{5}
}

// Attach volume request
type AttachVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume parameters
	Volume *VolumeParameters `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// Device handle
	DeviceHandle string `protobuf:"bytes,2,opt,name=device_handle,json=deviceHandle,proto3" json:"device_handle,omitempty"`
}

func (x *AttachVolumeRequest) Reset() {
	*x = AttachVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachVolumeRequest) ProtoMessage() {}

func (x *AttachVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachVolumeRequest.ProtoReflect.Descriptor instead.
func (*AttachVolumeRequest) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{6}
}

func (x *AttachVolumeRequest) GetVolume() *VolumeParameters {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *AttachVolumeRequest) GetDeviceHandle() string {
	if x != nil {
		return x.DeviceHandle
	}
	return ""
}

// Attach volume response
type AttachVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttachVolumeResponse) Reset() {
	*x = AttachVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachVolumeResponse) ProtoMessage() {}

func (x *AttachVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachVolumeResponse.ProtoReflect.Descriptor instead.
func (*AttachVolumeResponse) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{7}
}

// Detach volume request
type DetachVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Volume GUID/UUID
	VolumeId []byte `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Device handle
	DeviceHandle string `protobuf:"bytes,2,opt,name=device_handle,json=deviceHandle,proto3" json:"device_handle,omitempty"`
}

func (x *DetachVolumeRequest) Reset() {
	*x = DetachVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachVolumeRequest) ProtoMessage() {}

func (x *DetachVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachVolumeRequest.ProtoReflect.Descriptor instead.
func (*DetachVolumeRequest) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{8}
}

func (x *DetachVolumeRequest) GetVolumeId() []byte {
	if x != nil {
		return x.VolumeId
	}
	return nil
}

func (x *DetachVolumeRequest) GetDeviceHandle() string {
	if x != nil {
		return x.DeviceHandle
	}
	return ""
}

// Detach volume response
type DetachVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DetachVolumeResponse) Reset() {
	*x = DetachVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachVolumeResponse) ProtoMessage() {}

func (x *DetachVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachVolumeResponse.ProtoReflect.Descriptor instead.
func (*DetachVolumeResponse) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{9}
}

// QoS limit values.  0 means unlimited, while UINT64_MAX means to leave the
// current limit value unchanged.  If one of the limits isn't supported by a
// given device/volume, it must be set to 0.
type QosLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read kIOPS
	RdIops uint64 `protobuf:"varint,1,opt,name=rd_iops,json=rdIops,proto3" json:"rd_iops,omitempty"`
	// Write kIOPS
	WrIops uint64 `protobuf:"varint,2,opt,name=wr_iops,json=wrIops,proto3" json:"wr_iops,omitempty"`
	// Read/write kIOPS
	RwIops uint64 `protobuf:"varint,3,opt,name=rw_iops,json=rwIops,proto3" json:"rw_iops,omitempty"`
	// Read bandwidth (MB/s)
	RdBandwidth uint64 `protobuf:"varint,4,opt,name=rd_bandwidth,json=rdBandwidth,proto3" json:"rd_bandwidth,omitempty"`
	// Write bandwidth (MB/s)
	WrBandwidth uint64 `protobuf:"varint,5,opt,name=wr_bandwidth,json=wrBandwidth,proto3" json:"wr_bandwidth,omitempty"`
	// Read/write bandwidth (MB/s)
	RwBandwidth uint64 `protobuf:"varint,6,opt,name=rw_bandwidth,json=rwBandwidth,proto3" json:"rw_bandwidth,omitempty"`
}

func (x *QosLimit) Reset() {
	*x = QosLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosLimit) ProtoMessage() {}

func (x *QosLimit) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosLimit.ProtoReflect.Descriptor instead.
func (*QosLimit) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{10}
}

func (x *QosLimit) GetRdIops() uint64 {
	if x != nil {
		return x.RdIops
	}
	return 0
}

func (x *QosLimit) GetWrIops() uint64 {
	if x != nil {
		return x.WrIops
	}
	return 0
}

func (x *QosLimit) GetRwIops() uint64 {
	if x != nil {
		return x.RwIops
	}
	return 0
}

func (x *QosLimit) GetRdBandwidth() uint64 {
	if x != nil {
		return x.RdBandwidth
	}
	return 0
}

func (x *QosLimit) GetWrBandwidth() uint64 {
	if x != nil {
		return x.WrBandwidth
	}
	return 0
}

func (x *QosLimit) GetRwBandwidth() uint64 {
	if x != nil {
		return x.RwBandwidth
	}
	return 0
}

// SetQos request
type SetQosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device handle
	DeviceHandle string `protobuf:"bytes,1,opt,name=device_handle,json=deviceHandle,proto3" json:"device_handle,omitempty"`
	// GUID/UUID of a volume to configure QoS on.  If this parameter is omitted,
	// the QoS will be set up on the whole device (all volumes attached to that
	// device will share QoS settings).  Some device types might only support
	// configuring QoS on per-device (volume_id must be empty) or per-volume level
	// (volume_id cannot be empty).  This information can be obtained by sending a
	// GetQosCapabilities request.
	VolumeId []byte `protobuf:"bytes,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Maximum allowed IOPS/bandwidth
	Maximum *QosLimit `protobuf:"bytes,3,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *SetQosRequest) Reset() {
	*x = SetQosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQosRequest) ProtoMessage() {}

func (x *SetQosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQosRequest.ProtoReflect.Descriptor instead.
func (*SetQosRequest) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{11}
}

func (x *SetQosRequest) GetDeviceHandle() string {
	if x != nil {
		return x.DeviceHandle
	}
	return ""
}

func (x *SetQosRequest) GetVolumeId() []byte {
	if x != nil {
		return x.VolumeId
	}
	return nil
}

func (x *SetQosRequest) GetMaximum() *QosLimit {
	if x != nil {
		return x.Maximum
	}
	return nil
}

// SetQos response
type SetQosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetQosResponse) Reset() {
	*x = SetQosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQosResponse) ProtoMessage() {}

func (x *SetQosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQosResponse.ProtoReflect.Descriptor instead.
func (*SetQosResponse) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{12}
}

// Get QoS capabilities request
type GetQosCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of a device to query for QoS capabilities
	DeviceType DeviceType `protobuf:"varint,1,opt,name=device_type,json=deviceType,proto3,enum=sma.DeviceType" json:"device_type,omitempty"`
}

func (x *GetQosCapabilitiesRequest) Reset() {
	*x = GetQosCapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQosCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQosCapabilitiesRequest) ProtoMessage() {}

func (x *GetQosCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQosCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetQosCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{13}
}

func (x *GetQosCapabilitiesRequest) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_INVALID
}

// Get QoS capabilities response
type GetQosCapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device level maximum QoS limits
	MaxDeviceCaps *GetQosCapabilitiesResponse_QosCapabilities `protobuf:"bytes,1,opt,name=max_device_caps,json=maxDeviceCaps,proto3" json:"max_device_caps,omitempty"`
	// Volume level maximum QoS limits
	MaxVolumeCaps *GetQosCapabilitiesResponse_QosCapabilities `protobuf:"bytes,2,opt,name=max_volume_caps,json=maxVolumeCaps,proto3" json:"max_volume_caps,omitempty"`
}

func (x *GetQosCapabilitiesResponse) Reset() {
	*x = GetQosCapabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQosCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQosCapabilitiesResponse) ProtoMessage() {}

func (x *GetQosCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQosCapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*GetQosCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{14}
}

func (x *GetQosCapabilitiesResponse) GetMaxDeviceCaps() *GetQosCapabilitiesResponse_QosCapabilities {
	if x != nil {
		return x.MaxDeviceCaps
	}
	return nil
}

func (x *GetQosCapabilitiesResponse) GetMaxVolumeCaps() *GetQosCapabilitiesResponse_QosCapabilities {
	if x != nil {
		return x.MaxVolumeCaps
	}
	return nil
}

type GetQosCapabilitiesResponse_QosCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read IOPS
	RdIops bool `protobuf:"varint,1,opt,name=rd_iops,json=rdIops,proto3" json:"rd_iops,omitempty"`
	// Write IOPS
	WrIops bool `protobuf:"varint,2,opt,name=wr_iops,json=wrIops,proto3" json:"wr_iops,omitempty"`
	// Read/write IOPS
	RwIops bool `protobuf:"varint,3,opt,name=rw_iops,json=rwIops,proto3" json:"rw_iops,omitempty"`
	// Read bandwidth
	RdBandwidth bool `protobuf:"varint,4,opt,name=rd_bandwidth,json=rdBandwidth,proto3" json:"rd_bandwidth,omitempty"`
	// Write bandwidth
	WrBandwidth bool `protobuf:"varint,5,opt,name=wr_bandwidth,json=wrBandwidth,proto3" json:"wr_bandwidth,omitempty"`
	// Read/write bandwidth
	RwBandwidth bool `protobuf:"varint,6,opt,name=rw_bandwidth,json=rwBandwidth,proto3" json:"rw_bandwidth,omitempty"`
}

func (x *GetQosCapabilitiesResponse_QosCapabilities) Reset() {
	*x = GetQosCapabilitiesResponse_QosCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sma_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQosCapabilitiesResponse_QosCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQosCapabilitiesResponse_QosCapabilities) ProtoMessage() {}

func (x *GetQosCapabilitiesResponse_QosCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_sma_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQosCapabilitiesResponse_QosCapabilities.ProtoReflect.Descriptor instead.
func (*GetQosCapabilitiesResponse_QosCapabilities) Descriptor() ([]byte, []int) {
	return file_sma_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetQosCapabilitiesResponse_QosCapabilities) GetRdIops() bool {
	if x != nil {
		return x.RdIops
	}
	return false
}

func (x *GetQosCapabilitiesResponse_QosCapabilities) GetWrIops() bool {
	if x != nil {
		return x.WrIops
	}
	return false
}

func (x *GetQosCapabilitiesResponse_QosCapabilities) GetRwIops() bool {
	if x != nil {
		return x.RwIops
	}
	return false
}

func (x *GetQosCapabilitiesResponse_QosCapabilities) GetRdBandwidth() bool {
	if x != nil {
		return x.RdBandwidth
	}
	return false
}

func (x *GetQosCapabilitiesResponse_QosCapabilities) GetWrBandwidth() bool {
	if x != nil {
		return x.WrBandwidth
	}
	return false
}

func (x *GetQosCapabilitiesResponse_QosCapabilities) GetRwBandwidth() bool {
	if x != nil {
		return x.RwBandwidth
	}
	return false
}

var File_sma_proto protoreflect.FileDescriptor

var file_sma_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x73, 0x6d, 0x61,
	0x1a, 0x0a, 0x6e, 0x76, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x76, 0x69,
	0x72, 0x74, 0x69, 0x6f, 0x5f, 0x62, 0x6c, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x6e, 0x76, 0x6d, 0x66, 0x5f, 0x74, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x6e, 0x76, 0x6d, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x02, 0x0a, 0x16, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x32, 0x12, 0x3a, 0x0a, 0x06, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x6d,
	0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x52,
	0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x74, 0x77, 0x65, 0x61, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6d,
	0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x22, 0x0a,
	0x06, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x45, 0x53, 0x5f, 0x43,
	0x42, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x45, 0x53, 0x5f, 0x58, 0x54, 0x53, 0x10,
	0x01, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x57, 0x45, 0x41, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4c, 0x42, 0x41, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x57,
	0x45, 0x41, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4e, 0x45,
	0x47, 0x5f, 0x4c, 0x42, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4c, 0x42, 0x41, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x57, 0x45, 0x41, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x43, 0x52, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4c, 0x42, 0x41,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x57, 0x45, 0x41, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x43, 0x52, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x5f,
	0x4c, 0x42, 0x41, 0x10, 0x03, 0x22, 0xb5, 0x01, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x76, 0x6d, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x6e, 0x76, 0x6d, 0x66,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x76, 0x6d, 0x66, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x80, 0x02,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x76, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x6e, 0x76, 0x6d, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x76, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f,
	0x5f, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x5f, 0x62, 0x6c, 0x6b, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x76, 0x69, 0x72, 0x74, 0x69, 0x6f, 0x42, 0x6c, 0x6b, 0x12, 0x3b, 0x0a, 0x08, 0x6e, 0x76, 0x6d,
	0x66, 0x5f, 0x74, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d,
	0x61, 0x2e, 0x6e, 0x76, 0x6d, 0x66, 0x5f, 0x74, 0x63, 0x70, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6e,
	0x76, 0x6d, 0x66, 0x54, 0x63, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x2e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x22, 0x2d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x08,
	0x51, 0x6f, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x64, 0x5f, 0x69,
	0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x64, 0x49, 0x6f, 0x70,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x72, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x77, 0x72, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x77,
	0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x77, 0x49,
	0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x72, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x72,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x77, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x72, 0x77, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x7a, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x51, 0x6f, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x51,
	0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x51, 0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73,
	0x6d, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x51, 0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x73, 0x12, 0x57, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x73, 0x1a, 0xc5, 0x01, 0x0a, 0x0f, 0x51,
	0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x64, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x72, 0x5f, 0x69, 0x6f,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x72, 0x49, 0x6f, 0x70, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x77, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x77, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x64, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x77, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x77, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x77, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x2a, 0x71, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x56, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x49, 0x52, 0x54, 0x49, 0x4f, 0x5f, 0x42, 0x4c, 0x4b, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x56, 0x4d, 0x46, 0x5f,
	0x54, 0x43, 0x50, 0x10, 0x03, 0x32, 0xc2, 0x03, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x6d, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18,
	0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06,
	0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x12, 0x12, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x74,
	0x51, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x6d, 0x61,
	0x2e, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6d, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x6f, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x64, 0x6b, 0x2f, 0x73, 0x6d,
	0x61, 0x2d, 0x67, 0x6f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sma_proto_rawDescOnce sync.Once
	file_sma_proto_rawDescData = file_sma_proto_rawDesc
)

func file_sma_proto_rawDescGZIP() []byte {
	file_sma_proto_rawDescOnce.Do(func() {
		file_sma_proto_rawDescData = protoimpl.X.CompressGZIP(file_sma_proto_rawDescData)
	})
	return file_sma_proto_rawDescData
}

var file_sma_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sma_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_sma_proto_goTypes = []interface{}{
	(DeviceType)(0),                                    // 0: sma.DeviceType
	(VolumeCryptoParameters_Cipher)(0),                 // 1: sma.VolumeCryptoParameters.Cipher
	(VolumeCryptoParameters_TweakMode)(0),              // 2: sma.VolumeCryptoParameters.TweakMode
	(*VolumeCryptoParameters)(nil),                     // 3: sma.VolumeCryptoParameters
	(*VolumeParameters)(nil),                           // 4: sma.VolumeParameters
	(*CreateDeviceRequest)(nil),                        // 5: sma.CreateDeviceRequest
	(*CreateDeviceResponse)(nil),                       // 6: sma.CreateDeviceResponse
	(*DeleteDeviceRequest)(nil),                        // 7: sma.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil),                       // 8: sma.DeleteDeviceResponse
	(*AttachVolumeRequest)(nil),                        // 9: sma.AttachVolumeRequest
	(*AttachVolumeResponse)(nil),                       // 10: sma.AttachVolumeResponse
	(*DetachVolumeRequest)(nil),                        // 11: sma.DetachVolumeRequest
	(*DetachVolumeResponse)(nil),                       // 12: sma.DetachVolumeResponse
	(*QosLimit)(nil),                                   // 13: sma.QosLimit
	(*SetQosRequest)(nil),                              // 14: sma.SetQosRequest
	(*SetQosResponse)(nil),                             // 15: sma.SetQosResponse
	(*GetQosCapabilitiesRequest)(nil),                  // 16: sma.GetQosCapabilitiesRequest
	(*GetQosCapabilitiesResponse)(nil),                 // 17: sma.GetQosCapabilitiesResponse
	(*GetQosCapabilitiesResponse_QosCapabilities)(nil), // 18: sma.GetQosCapabilitiesResponse.QosCapabilities
	(*nvmf.VolumeConnectionParameters)(nil),            // 19: sma.nvmf.VolumeConnectionParameters
	(*nvme.DeviceParameters)(nil),                      // 20: sma.nvme.DeviceParameters
	(*virtio_blk.DeviceParameters)(nil),                // 21: sma.virtio_blk.DeviceParameters
	(*nvmf_tcp.DeviceParameters)(nil),                  // 22: sma.nvmf_tcp.DeviceParameters
}
var file_sma_proto_depIdxs = []int32{
	1,  // 0: sma.VolumeCryptoParameters.cipher:type_name -> sma.VolumeCryptoParameters.Cipher
	2,  // 1: sma.VolumeCryptoParameters.tweak_mode:type_name -> sma.VolumeCryptoParameters.TweakMode
	19, // 2: sma.VolumeParameters.nvmf:type_name -> sma.nvmf.VolumeConnectionParameters
	3,  // 3: sma.VolumeParameters.crypto:type_name -> sma.VolumeCryptoParameters
	4,  // 4: sma.CreateDeviceRequest.volume:type_name -> sma.VolumeParameters
	20, // 5: sma.CreateDeviceRequest.nvme:type_name -> sma.nvme.DeviceParameters
	21, // 6: sma.CreateDeviceRequest.virtio_blk:type_name -> sma.virtio_blk.DeviceParameters
	22, // 7: sma.CreateDeviceRequest.nvmf_tcp:type_name -> sma.nvmf_tcp.DeviceParameters
	4,  // 8: sma.AttachVolumeRequest.volume:type_name -> sma.VolumeParameters
	13, // 9: sma.SetQosRequest.maximum:type_name -> sma.QosLimit
	0,  // 10: sma.GetQosCapabilitiesRequest.device_type:type_name -> sma.DeviceType
	18, // 11: sma.GetQosCapabilitiesResponse.max_device_caps:type_name -> sma.GetQosCapabilitiesResponse.QosCapabilities
	18, // 12: sma.GetQosCapabilitiesResponse.max_volume_caps:type_name -> sma.GetQosCapabilitiesResponse.QosCapabilities
	5,  // 13: sma.StorageManagementAgent.CreateDevice:input_type -> sma.CreateDeviceRequest
	7,  // 14: sma.StorageManagementAgent.DeleteDevice:input_type -> sma.DeleteDeviceRequest
	9,  // 15: sma.StorageManagementAgent.AttachVolume:input_type -> sma.AttachVolumeRequest
	11, // 16: sma.StorageManagementAgent.DetachVolume:input_type -> sma.DetachVolumeRequest
	14, // 17: sma.StorageManagementAgent.SetQos:input_type -> sma.SetQosRequest
	16, // 18: sma.StorageManagementAgent.GetQosCapabilities:input_type -> sma.GetQosCapabilitiesRequest
	6,  // 19: sma.StorageManagementAgent.CreateDevice:output_type -> sma.CreateDeviceResponse
	8,  // 20: sma.StorageManagementAgent.DeleteDevice:output_type -> sma.DeleteDeviceResponse
	10, // 21: sma.StorageManagementAgent.AttachVolume:output_type -> sma.AttachVolumeResponse
	12, // 22: sma.StorageManagementAgent.DetachVolume:output_type -> sma.DetachVolumeResponse
	15, // 23: sma.StorageManagementAgent.SetQos:output_type -> sma.SetQosResponse
	17, // 24: sma.StorageManagementAgent.GetQosCapabilities:output_type -> sma.GetQosCapabilitiesResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_sma_proto_init() }
func file_sma_proto_init() {
	if File_sma_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sma_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeCryptoParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQosCapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQosCapabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sma_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQosCapabilitiesResponse_QosCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sma_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*VolumeParameters_Nvmf)(nil),
	}
	file_sma_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CreateDeviceRequest_Nvme)(nil),
		(*CreateDeviceRequest_VirtioBlk)(nil),
		(*CreateDeviceRequest_NvmfTcp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sma_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sma_proto_goTypes,
		DependencyIndexes: file_sma_proto_depIdxs,
		EnumInfos:         file_sma_proto_enumTypes,
		MessageInfos:      file_sma_proto_msgTypes,
	}.Build()
	File_sma_proto = out.File
	file_sma_proto_rawDesc = nil
	file_sma_proto_goTypes = nil
	file_sma_proto_depIdxs = nil
}
